// <auto-generated />
using System;
using GdevApps.DAL.DataContexts.AspNetUsers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GdevApps.Portal.Migrations
{
    [DbContext(typeof(AspNetUserContext))]
    [Migration("20181204205513_portal_migrations")]
    partial class portal_migrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims","gradebook_license");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles","gradebook_license");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims","gradebook_license");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(255);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins","gradebook_license");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255);

                    b.Property<string>("RoleId")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles","gradebook_license");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int(11)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(256);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<short>("EmailConfirmed")
                        .HasColumnType("bit(1)");

                    b.Property<short>("LockoutEnabled")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<short>("PhoneNumberConfirmed")
                        .HasColumnType("bit(1)");

                    b.Property<string>("SecurityStamp");

                    b.Property<short>("TwoFactorEnabled")
                        .HasColumnType("bit(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers","gradebook_license");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens","gradebook_license");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("AspUserId")
                        .HasMaxLength(256);

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AspUserId")
                        .HasName("aspnetuser_parent_id_idx");

                    b.HasIndex("CreatedBy")
                        .HasName("created_by_parent_aspuserId_idx");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("Email_UNIQUE");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.ParentStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GradeBookId");

                    b.Property<string>("ParentAspId");

                    b.Property<int>("ParentId");

                    b.Property<string>("StudentEmail");

                    b.HasKey("Id");

                    b.HasIndex("GradeBookId");

                    b.HasIndex("ParentAspId");

                    b.HasIndex("ParentId");

                    b.ToTable("ParentStudent");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("AspNetUserId")
                        .HasMaxLength(255);

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId")
                        .HasName("aspnetuser_teacher_id_idx");

                    b.HasIndex("CreatedBy")
                        .HasName("createdBy_aspnetuser_id_idx");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("FolderType")
                        .HasColumnType("int(11)");

                    b.Property<string>("GoogleFileId")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<short>("IsDeleted")
                        .HasColumnType("bit(1)");

                    b.Property<int?>("PrentFolderId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasName("folder_user_id_idx");

                    b.HasIndex("FolderType")
                        .HasName("folder_type_id_idx");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("PrentFolderId")
                        .HasName("parentfolder_folder_id_idx");

                    b.ToTable("Folder");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.FolderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("FolderType1")
                        .IsRequired()
                        .HasColumnName("FolderType")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("FolderType1")
                        .IsUnique()
                        .HasName("FolderType_UNIQUE");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("FolderType");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.GradeBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("ClassroomId")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GoogleUniqueId")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<short>("IsDeleted")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasName("aspnet_user_id_idx");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("GradeBook");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.ParentGradeBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("ClassroomName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GoogleUniqueId")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<short>("IsDeleted")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("MainGradeBookId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasName("aspnetuser_parentGradebook_id_idx");

                    b.HasIndex("GoogleUniqueId")
                        .IsUnique()
                        .HasName("google_unique_id_UNIQUE");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MainGradeBookId")
                        .HasName("gradebook_parentgradebook_id_idx");

                    b.ToTable("ParentGradeBook");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.ParentSharedGradeBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FolderId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ParentAspId")
                        .HasMaxLength(255);

                    b.Property<int>("ParentGradeBookId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int(11)");

                    b.Property<int>("SharedStatus")
                        .HasColumnType("int(11)");

                    b.Property<string>("TeacherAspId")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("FolderId")
                        .HasName("folder_shared_id_idx");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("ParentAspId")
                        .HasName("parent_shared_id_idx");

                    b.HasIndex("ParentGradeBookId")
                        .HasName("parentgradebook_shared_id_idx");

                    b.HasIndex("ParentId")
                        .HasName("parentshared_parent_id_idx");

                    b.HasIndex("SharedStatus")
                        .HasName("status_shared_id_idx");

                    b.HasIndex("TeacherAspId")
                        .HasName("aspnet_user_shared_id_idx");

                    b.ToTable("ParentSharedGradeBook");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.SharedStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("SharedStatus");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.LicensedUser.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.LicensedUser.Licenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountType");

                    b.Property<int?>("AccountTypeNavigationId");

                    b.Property<string>("BuyerEmail");

                    b.Property<int>("DaysRemaining");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("Price");

                    b.Property<int>("Product");

                    b.Property<int?>("ProductNavigationId");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeNavigationId");

                    b.HasIndex("ProductNavigationId");

                    b.HasIndex("UserId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.LicensedUser.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.LicensedUser.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(125)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("Id_UNIQUE");

                    b.ToTable("Roles","gradebook_license");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.LicensedUser.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int>("Role")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("Email_UNIQUE");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("Id_UNIQUE");

                    b.HasIndex("Role")
                        .HasName("Role_idx");

                    b.ToTable("Users","gradebook_license");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetRoleClaims", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUserClaims", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUserLogins", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUserRoles", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.Parent", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "AspUser")
                        .WithMany("ParentAspUser")
                        .HasForeignKey("AspUserId")
                        .HasConstraintName("aspnetuser_parent_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "CreatedByNavigation")
                        .WithMany("ParentCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("created_by_parent_aspuserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.ParentStudent", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.GradeBook", "GradeBook")
                        .WithMany("ParentStudent")
                        .HasForeignKey("GradeBookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "ParentAsp")
                        .WithMany("ParentStudent")
                        .HasForeignKey("ParentAspId");

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.Parent", "Parent")
                        .WithMany("ParentStudent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.Teacher", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "AspNetUser")
                        .WithMany("TeacherAspNetUser")
                        .HasForeignKey("AspNetUserId")
                        .HasConstraintName("aspnetuser_teacher_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "CreatedByNavigation")
                        .WithMany("TeacherCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("createdBy_aspuserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.Folder", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "CreatedByNavigation")
                        .WithMany("Folder")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("folder_user_id");

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.FolderType", "FolderTypeNavigation")
                        .WithMany("Folder")
                        .HasForeignKey("FolderType")
                        .HasConstraintName("folder_type_id");

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.Folder", "PrentFolder")
                        .WithMany("InversePrentFolder")
                        .HasForeignKey("PrentFolderId")
                        .HasConstraintName("parentfolder_folder_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.GradeBook", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "CreatedByNavigation")
                        .WithMany("GradeBook")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("aspnet_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.ParentGradeBook", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "CreatedByNavigation")
                        .WithMany("ParentGradeBook")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("aspnetuser_parentGradebook_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.GradeBook", "MainGradeBook")
                        .WithMany("ParentGradeBook")
                        .HasForeignKey("MainGradeBookId")
                        .HasConstraintName("gradebook_parentgradebook_id");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.ParentSharedGradeBook", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.Folder", "Folder")
                        .WithMany("ParentSharedGradeBook")
                        .HasForeignKey("FolderId")
                        .HasConstraintName("folder_shared_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.ParentGradeBook", "ParentGradeBook")
                        .WithMany("ParentSharedGradeBook")
                        .HasForeignKey("ParentGradeBookId")
                        .HasConstraintName("parentgradebook_shared_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.Parent", "Parent")
                        .WithMany("ParentSharedGradeBook")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("parentshared_parent_id");

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.GradeBook.SharedStatus", "SharedStatusNavigation")
                        .WithMany("ParentSharedGradeBook")
                        .HasForeignKey("SharedStatus")
                        .HasConstraintName("status_shared_id");

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.AspNetUsers", "TeacherAsp")
                        .WithMany("ParentSharedGradeBook")
                        .HasForeignKey("TeacherAspId")
                        .HasConstraintName("teacherasp_aspuser_id");
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.LicensedUser.Licenses", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.LicensedUser.Account", "AccountTypeNavigation")
                        .WithMany("Licenses")
                        .HasForeignKey("AccountTypeNavigationId");

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.LicensedUser.Products", "ProductNavigation")
                        .WithMany("Licenses")
                        .HasForeignKey("ProductNavigationId");

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.LicensedUser.Users", "User")
                        .WithMany("Licenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdevApps.DAL.DataModels.AspNetUsers.LicensedUser.Users", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.LicensedUser.Roles", "RoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Role")
                        .HasConstraintName("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GdevApps.DAL.DataModels.AspNetUsers.AspNetUser.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
